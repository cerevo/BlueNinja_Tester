/**
 * @file gpio_wrapper.h
 * @brief a header file for TZ10xx gpio wrapper
 * @version V0.0
 * @date $Date:: 2014-07-09 11:12:54 +0900 #$
 * @note
 */

/*
 * COPYRIGHT (C) 2014
 * TOSHIBA CORPORATION SEMICONDUCTOR & STORAGE PRODUCTS COMPANY
 * ALL RIGHTS RESERVED
 *
 * THE SOURCE CODE AND ITS RELATED DOCUMENTATION IS PROVIDED "AS IS". TOSHIBA
 * CORPORATION MAKES NO OTHER WARRANTY OF ANY KIND, WHETHER EXPRESS, IMPLIED OR,
 * STATUTORY AND DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF MERCHANTABILITY,
 * SATISFACTORY QUALITY, NON INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * THE SOURCE CODE AND DOCUMENTATION MAY INCLUDE ERRORS. TOSHIBA CORPORATION
 * RESERVES THE RIGHT TO INCORPORATE MODIFICATIONS TO THE SOURCE CODE IN LATER
 * REVISIONS OF IT, AND TO MAKE IMPROVEMENTS OR CHANGES IN THE DOCUMENTATION OR
 * THE PRODUCTS OR TECHNOLOGIES DESCRIBED THEREIN AT ANY TIME.
 * 
 * TOSHIBA CORPORATION SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT OR
 * CONSEQUENTIAL DAMAGE OR LIABILITY ARISING FROM YOUR USE OF THE SOURCE CODE OR
 * ANY DOCUMENTATION, INCLUDING BUT NOT LIMITED TO, LOST REVENUES, DATA OR
 * PROFITS, DAMAGES OF ANY SPECIAL, INCIDENTAL OR CONSEQUENTIAL NATURE, PUNITIVE
 * DAMAGES, LOSS OF PROPERTY OR LOSS OF PROFITS ARISING OUT OF OR IN CONNECTION
 * WITH THIS AGREEMENT, OR BEING UNUSABLE, EVEN IF ADVISED OF THE POSSIBILITY OR
 * PROBABILITY OF SUCH DAMAGES AND WHETHER A CLAIM FOR SUCH DAMAGE IS BASED UPON
 * WARRANTY, CONTRACT, TORT, NEGLIGENCE OR OTHERWISE.
 */

#ifndef GPIO_WRAPPER_H
#define GPIO_WRAPPER_H

#include "GPIO_TZ10xx.h"

/**
 * @brief driver function pointers
 */
typedef struct _TZ10XX_DRIVER_GPIO_WRAPPER {
	/// TZ10XX_DRIVER_GPIO {
	ARM_DRV_VERSION    (*GetVersion)   (void);
	GPIO_CAPABILITIES  (*GetCapabilities)(uint32_t pin);
	GPIO_STATUS        (*Initialize)          (void);
	GPIO_STATUS        (*Uninitialize)       (void);
	GPIO_STATUS        (*PowerControl)  (ARM_POWER_STATE state);
	GPIO_STATUS        (*Configure)        (uint32_t pin, GPIO_DIRECTION    dir,
                                                      GPIO_EVENT          event,
                                                      GPIO_SignalEvent_t cb_event);
	GPIO_STATUS        (*ReadPin)          (uint32_t pin, uint32_t *val);
	GPIO_STATUS        (*Read)               (uint32_t *val);
	GPIO_STATUS        (*WritePin)          (uint32_t pin, uint32_t val);
	GPIO_STATUS        (*Write)              (uint32_t mask,uint32_t val);
	/// } TZ10XX_DRIVER_GPIO
	GPIO_STATUS        (*Unconfigure)        (uint32_t pin, GPIO_DIRECTION dir);
} const TZ10XX_DRIVER_GPIO_WRAPPER;

extern TZ10XX_DRIVER_GPIO_WRAPPER Driver_GPIO_Wrapper;

#endif /* GPIO_WRAPPER_H */
